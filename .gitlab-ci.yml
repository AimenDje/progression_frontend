image: docker/compose:1.29.2

services:
  - docker:20.10.16-dind

stages:
  - verifications 
  - build_image
  - tag_image
  - test
  - deploy_image

variables:
  PROGRESSION_DIR: $CI_PROJECT_DIR
  DOCKER_TLS_CERTDIR: ""
  BRANCHE: $CI_COMMIT_REF_NAME
  
.preparer_contexte: &preparer_contexte
    - mkdir ~/.ssh && cp $ID_RSA ~/.ssh/id_rsa && chmod 400 ~/.ssh/id_rsa
    - echo -e "Host *\n  StrictHostKeyChecking no" > ~/.ssh/config
    - docker context create --docker host=ssh://$CD_USER@$CD_HOST:$CD_PORT --description="Production" prod
    - docker context use prod
    - DOCKER_HOST= 

.login: &login
    - apk add ca-certificates openssh
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    
# Stage test

# Tests unitaires
test_unitaires:
  stage: test
  needs:
    - job: const_image
      optional: true
  script:
    - TAG_DEPLOY=$BRANCHE docker-compose run tests_app
  except:
    - master
    
# Linter    
linter:
  stage: test
  needs:
    - job: const_image
      optional: true
  script:
    - TAG_DEPLOY=$BRANCHE docker-compose run linter
  except:
    - master

# Stage version_check

# Vérification de l'incrément du numéro de version
version_check:
  stage: verifications
  script:
    - docker run -v $PWD:/progression_frontend bitnami/git bash -c 'git config --global --add safe.directory /progression_frontend && cd /progression_frontend && dpkg --compare-versions "$(git show HEAD:VERSION|cut -d "=" -f 2)" "gt" "$(git show HEAD^:VERSION|cut -d "=" -f 2)" || ( echo ERREUR la version n’a pas avancé && exit 1 )'
  only:
  - master

# Stage build_image

# Construction de l'image
const_image:
  stage: build_image
  before_script: *login
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - \[\[ "$CI_COMMIT_REF_NAME" = "master" \|\| "$CI_COMMIT_REF_NAME" = "dev" \]\] && target="production-stage" || target="build-stage"
    - \[\[ "$CI_COMMIT_REF_NAME" = "master" \|\| "$CI_COMMIT_REF_NAME" = "dev" \]\] && mode="prod" || mode="dev"
    - docker build --build-arg NODE_ENV=$mode --build-arg MODE=$mode --target $target -t $CI_REGISTRY/$CI_PROJECT_PATH:$BRANCHE .
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH:$BRANCHE

const_lti:
  stage: build_image
  before_script: *login
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY/$CI_PROJECT_PATH:lti_latest ltijs
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH:lti_latest
  only:
  - master


# Stage tag

tag_latest:
  stage: tag_image
  needs: [const_image]
  before_script:
    - *login
  script:
    - docker pull $CI_REGISTRY/$CI_PROJECT_PATH:$BRANCHE
    - docker tag $CI_REGISTRY/$CI_PROJECT_PATH:$BRANCHE $CI_REGISTRY/$CI_PROJECT_PATH:latest   
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH:latest
  only:
    - master

  
# Stage deploy_image

# Déploiement sur /staging ou /dev
deploy_staging:
  stage: deploy_image
  needs: [tag_latest]
  environment:
    name: staging
    url: https://progression.dti.crosemont.quebec/staging/
    on_stop: stop_staging
  before_script:
    - *preparer_contexte
    - *login
  script:
    - TAG_DEPLOY=dev docker-compose pull app
    - TAG_DEPLOY=dev docker-compose -p prod up --force-recreate --no-deps -d app
  only:
    - master
    
stop_staging:
  stage: deploy_image
  environment:
    name: staging
    action: stop
  script:
    - TAG_DEPLOY=staging docker-compose stop app
  only:
    - dev
  when:
    manual

# Déploiement sur /staging ou /dev
deploy_dev:
  stage: deploy_image
  needs: [test_unitaires, linter]
  environment:
    name: dev
    url: https://progression.dti.crosemont.quebec/dev/
    on_stop: stop_dev
  before_script:
    - *preparer_contexte
    - *login
  script:
    - TAG_DEPLOY=dev docker-compose pull app
    - TAG_DEPLOY=dev docker-compose -p dev up --force-recreate --no-deps -d app
  only:
    - dev

stop_dev:
  stage: deploy_image
  environment:
    name: dev    
    action: stop
  script:
    - TAG_DEPLOY=dev docker-compose stop app
  only:
    - dev
  when:
    manual
    
