version: '3.5'

services: 
  app:
    image: git.dti.crosemont.quebec:5050/progression/progression_frontend:$TAG_DEPLOY
    build: ./
    container_name: progression_app_$CI_ENVIRONMENT_SLUG
    ports:
      - 127.0.0.1:$APP_PORT:8080
    env_file:
      - $ENV_FILE
      - VERSION

  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  mongo-express:
    image: mongo-express
    restart: always
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
      ME_CONFIG_SITE_BASEURL: /mongo/
    ports:
      - 8081:8081    

  ltijs:
    build: ltijs/
    restart: always
    ports:
      - 3000:3000
    environment:
      DB_HOST: 172.20.0.4
      DB_NAME: ltijs
      DB_USER: root
      DB_PASS: example
      LTI_KEY: w#np)xp!BE!2hLsbk}pR
      DEBUG: provider:*
    depends_on:
      - mongo
    extra_hosts:
      - "rocinante.lamancha:172.20.0.1"
    volumes:
      - "./ltijs:/app"
        
  tests_app: 
    build:
      context: ./
      target: build-stage
    command: npm run test:run
    networks:
      default:

  linter:
    build:
      context: ./
      target: build-stage
    command: npx eslint -c eslintrc.js src/**/*.{js,vue}        
# command to build
#   docker-compose build

# command to run
#   docker-compose up

# command to stop
#   docker-compose stop
# command to stop and remove container image
#   docker-compose rm -f -s

# Ajouter sudo devant chaque commande si nÃ©cessaire

# url front-end => http://localhost:8080
# url mock => http://localhost:3000

