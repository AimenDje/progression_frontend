version: '3.5'

services: 
  app:
    build: ./
    ports:
      - 8080:8080
    #Pour le développement  
    volumes:
      - "./app/src:/app/src"
      - "./app/public:/app/public"
    environment:
      NODE_ENV: dev
    networks:
      default:
        ipv4_address: 172.20.0.6

  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      default:
        ipv4_address: 172.20.0.4

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
    networks:
      default:
        ipv4_address: 172.20.0.10

  ltijs:
    build: ltijs/
    restart: always
    ports:
      - 3000:3000
    environment:
      DB_HOST: 172.20.0.4
      DB_NAME: ltijs
      DB_USER: root
      DB_PASS: example
      LTI_KEY: secret
      DEBUG: provider:*
    depends_on:
      - mongo
    extra_hosts:
      - "rocinante.lamancha:172.20.0.1"
    volumes:
      - "./ltijs:/app"
    networks:
      default:
        ipv4_address: 172.20.0.7


networks:
  default:
    external:
      name: progression_backend_progressionnet

# command to build
#   docker-compose build

# command to run
#   docker-compose up

# command to stop
#   docker-compose stop
# command to stop and remove container image
#   docker-compose rm -f -s

# Ajouter sudo devant chaque commande si nécessaire

# url front-end => http://localhost:8080
# url mock => http://localhost:3000

