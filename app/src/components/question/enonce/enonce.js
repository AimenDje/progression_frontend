import parseMD from "@/util/parse";
import TabNav from "@/components/question/onglets/TabNav.vue";
import Tab from "@/components/question/onglets/Tab.vue";
import R√©troaction from "@/components/question/r√©troactions/r√©troaction.vue";

export default {
	name: "Enonce",
	components: { TabNav, Tab, R√©troaction },
	computed: {
		mode√âdition() {
			return this.$store.state.mode_√©dition;
		},
		√©tat_r√©ussi() {
			return this.$store.state.avancement.√©tat == 2;
		},
		question() {
			return new Proxy(this.$store.state.question, {
				get: function (obj, prop) {
					return prop == "√©nonc√©" ? parseMD(obj[prop]) : obj[prop];
				},
			});
		},
		feedbacks_label() {
			return Object.keys(this.$store.state.question.feedback);
		},
		feedbacks_valeur() {
			return Object.values(this.$store.state.question.feedback);
		},
	},
	methods: {
		basculerBtnAper√ßu() {
			var element = document.getElementById("btn_aper√ßu").innerHTML;
			if (element == "Modifier ‚úé") {
				document.getElementById("btn_aper√ßu").innerHTML = "Aper√ßu üëÅ";
			} else {
				document.getElementById("btn_aper√ßu").innerHTML = "Modifier ‚úé";
			}
		},
		modifierContenu(e, indice) {
			this.contenu[indice].texte = e.target.innerText;
			switch (indice) {
				case 0:
					this.$store.state.question.niveau = this.contenu[indice].texte;
					break;

				case 1:
					this.$store.state.question.titre = this.contenu[indice].texte;
					break;

				case 2:
					this.$store.state.question.auteur = this.contenu[indice].texte;
					break;

				case 3:
					this.$store.state.question.licence = this.contenu[indice].texte;
					break;

			}
		},
		setSelected(tab) {
			this.selected = tab;
		},
		feedback_select: function (index) {
			let feedback = this.$store.state.question.feedback;
			switch (index) {
				case 0:
					if (feedback.positive == null) {
						this.$store.state.question.feedback.positive = "";
					}
					break;

				case 1:
					if (feedback.n√©gative == null) {
						this.$store.state.question.feedback.n√©gative = "";
					}
					break;

				case 2:
					if (feedback.erreur == null) {
						this.$store.state.question.feedback.erreur = "";
					}
					break;

			}
			return this.feedbacks_valeur[index] != null ? this.feedbacks_valeur[index] : "";
		},
		modifier√ânonc√©(){
			this.$store.state.question.√©nonc√© = this.√©nonc√©;
		},
		modifierDescription(){
			this.$store.state.question.description = this.description;
		}
	},

	data() {
		return {
			selected: '√ânonc√©',
			contenu:
				[
					{ texte: this.$store.state.question.niveau },
					{ texte: this.$store.state.question.titre },
					{ texte: this.$store.state.question.auteur },
					{ texte: this.$store.state.question.licence }
				]
			,
			√©nonc√©: this.$store.state.question.√©nonc√©,
			description: this.$store.state.question.description,
			aper√ßu: false,
			toolbar: {
				documentation: {
					title: 'Documentation Markdown',
					icon: 'v-md-icon-tip',
					action() {
						window.open('https://www.markdownguide.org/cheat-sheet', '_blank');
					}
				}
			}
		};
	},
};
